@prefix xsd: <http://www.w3.org/2001/XMLSchema#>.
@prefix dct: <http://purl.org/dc/terms/>.
@prefix func: <http://www.w3.org/2007/rif-builtin-function#>.
@prefix string: <http://www.w3.org/2000/10/swap/string#>.
@prefix e: <http://eulersharp.sourceforge.net/2003/03swap/log-rules#>.
@prefix creating: <http://e-editiones.ch/ontology/creating#>.
@prefix concept: <http://e-editiones.ch/ontology/concept#>.
@prefix math: <http://e-editiones.ch/ontology/mathematics#>.
@prefix text-expression: <http://e-editiones.ch/ontology/text-expression#>.
@prefix prosodic-structure: <http://e-editiones.ch/ontology/prosodic-structure#>.
@prefix literature: <http://e-editiones.ch/ontology/literature#>.

@prefix ordinal: <http://e-editiones.ch/rule/ordinal#>.

<http://nie-ine.org/rule/ordinal>
	dct:issued "2019-11-02"^^xsd:date;
	dct:license <http://creativecommons.org/licenses/by/3.0/>;
	dct:title "Ordinal rules"@en;
	dct:description """Rules to calculate ordinals for information entities."""@en;
	dct:creator "Hans Cools, MD, knowledge engineer, ontologist, software developer, NIE-INE, Basel University, Switzerland"@en.
#	dct:publisher "Basel University, Switzerland"@en.


# CUT THE TAIL NUMERAL OF A COMPOUND COLLECTION-IDENTIFIER TO ORDER: # Generalize to document collection
{
	?poemCollection
		a literature:Anthology;
		concept:hasIdentifierLiteral ?poemCollectionIdentifierLiteral. # E.g. "AZ1" : AZ = poet's initials, 1 = poem collection
	(?poemCollectionIdentifierLiteral "(\\d+)$") string:scrape ?ordinalNumeral
}
=>
{
	?poemCollection math:hasOrdinalNumeral ?ordinalNumeral
}.


# CUT THE TAIL NUMERAL OF A COMPOUND POEM-IDENTIFIER TO ORDER: # Generalize to document expression
{
	?versePoem
		a literature:VersePoem;
		text-expression:hasIdentifierLiteral ?versePoemIdentifierLiteral. # E.g. "AZ1.1" : AZ = poet's initials, 1 = poem collection, 1 = poem
	(?versePoemIdentifierLiteral "(\\d+)$") string:scrape ?ordinalNumeral
}
=>
{
	?versePoem math:hasOrdinalNumeral ?ordinalNumeral
}.


# CUT THE TAIL NUMERAL OF A COMPOUND STROPHE-IDENTIFIER TO ORDER: # Generalize to document content structure
{
	?strophe prosodic-structure:stropheHasIdentifier ?stropheIdentifier. # Identifier as an example of a reified symbolic entity
	?stropheIdentifier concept:identifierHasLiteral ?stropheIdentifierLiteral. # E.g. "AZ1.1.1" : AZ = poet's initials, 1 = poem collection, 1 = poem, 1 = strophe
	(?stropheIdentifierLiteral "(\\d+)$") string:scrape ?ordinalNumeral
}
=>
{
	?strophe math:hasOrdinalNumeral ?ordinalNumeral
}.


# CUT THE TAIL NUMERAL OF A COMPOUND VERSE-IDENTIFIER TO ORDER:
{
	?verse prosodic-structure:verseHasIdentifier ?verseIdentifier.
	?verseIdentifier concept:identifierHasLiteral ?verseIdentifierLiteral. # E.g. "AZ1.1.1a" : AZ = poet's initials, 1 = poem collection, 1 = poem, 1 = strophe, a = verse
	(?verseIdentifierLiteral "([a-z]+)$") string:scrape ?ordinalLiteral
}
=>
{
	?verse math:hasOrdinalLiteral ?ordinalLiteral
}.
