@prefix xsd: <http://www.w3.org/2001/XMLSchema#>.
@prefix dct: <http://purl.org/dc/terms/>.
@prefix func: <http://www.w3.org/2007/rif-builtin-function#>.
@prefix string: <http://www.w3.org/2000/10/swap/string#>.
@prefix e: <http://eulersharp.sourceforge.net/2003/03swap/log-rules#>.
@prefix concept: <http://www.nie.org/ontology/concept#>.
@prefix math: <http://www.nie.org/ontology/mathematics#>.
@prefix document: <http://www.nie.org/ontology/document#>.
@prefix text-expression: <http://www.nie.org/ontology/text-expression#>.
@prefix prosodic-structure: <http://www.nie.org/ontology/prosodic-structure#>.
@prefix literature: <http://www.nie.org/ontology/literature#>.

@prefix sequence-number: <http://www.nie.org/rule/sequence-number#>.

<http://nie-ine.org/rule/sequence-number>
	dct:issued "2019-11-02"^^xsd:date;
	dct:license <http://creativecommons.org/licenses/by/3.0/>;
	dct:title "Sequence number rules"@en;
	dct:description """Rules to calculate sequence numbers for information entities."""@en;
	dct:creator "Hans Cools, MD, knowledge engineer, ontologist, software developer, NIE-INE, Basel University, Switzerland"@en.
#	dct:publisher "? University, Switzerland"@en.


# Cut the tail number of a compound collection-identifier and use it to order: # generalize to document collection
{
	?poemCollection
		a literature:Collection;
		document:hasIdentifier ?poemCollectionIdentifier.
	?poemCollectionIdentifier 
		concept:hasLiteral ?poemCollectionIdentifierLiteral. # E.g. "AZ1" : AZ = poet's initials, 1 = poem collection
	(?poemCollectionIdentifierLiteral "(\\d+)$") string:scrape ?scrape
}
=>
{
	?poemCollection math:hasSequenceNumeral ?scrape
}.


# Cut the tail number of a compound poem-identifier and use it to order: # generalize to document expression
{
	?versePoem
		a literature:VersePoem;
		text-expression:hasIdentifier ?versePoemIdentifier.
	?versePoemIdentifier
		concept:hasLiteral ?versePoemIdentifierLiteral. # E.g. "AZ1.1" : AZ = poet's initials, 1 = poem collection, 1 = poem
	# Convert the literal string to a list of its alphanumeric components:
#	(?versePoemIdentifierLiteral ".") e:stringSplit ?stringList. # E.g. ("AZ1" "1")
	# Take out the last element of the list:
#	(?stringList 1) func:get ?lastElement. # E.g. "1"
	(?versePoemIdentifierLiteral "(\\d+)$") string:scrape ?scrape
}
=>
{
	?versePoem math:hasSequenceNumeral ?scrape
}.


# Cut the tail number of a compound strophe-identifier and use it to order: # generalize to document content structure
{
	?strophe
		prosodic-structure:stropheHasIdentifier ?stropheIdentifier.
	?stropheIdentifier concept:hasLiteral ?stropheIdentifierLiteral. # E.g. "AZ1.1.1" : AZ = poet's initials, 1 = poem collection, 1 = poem, 1 = strophe
	(?stropheIdentifierLiteral "(\\d+)$") string:scrape ?scrape # \\d{1,}
}
=>
{
	?strophe math:hasSequenceNumeral ?scrape
}.


# Cut the tail letter(s) of a compound verse-identifier and use it to order:
{
	?verse
		prosodic-structure:verseHasIdentifier ?verseIdentifier.
	?verseIdentifier
		concept:hasLiteral ?verseIdentifierLiteral. # E.g. "AZ1.1.1a" : AZ = poet's initials, 1 = poem collection, 1 = poem, 1 = strophe, a = verse
	(?verseIdentifierLiteral "([a-z]+)$") string:scrape ?scrape
}
=>
{
	?verse math:hasSequenceLiteral ?scrape
}.
