@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>.
@prefix pet: <http://www.pet.net/pet#>.
@prefix agent: <http://eulersharp.sourceforge.net/2003/03swap/agent#>.
@prefix org: <http://eulersharp.sourceforge.net/2003/03swap/organism#>.
@prefix foaf: <http://xmlns.com/foaf/0.1/>.
@prefix digproc: <http://eulersharp.sourceforge.net/2003/03swap/digitalProcedure#>.
@prefix e: <http://eulersharp.sourceforge.net/2003/03swap/log-rules#>.
@prefix : <#>.


{	
	?pet1
		a ?Pet1;
		agent:playsRole ?petRole1;
		foaf:name ?name1;
		pet:keptSeparateFrom ?pet2.
		?petRole1 a pet:Pet.
		?Pet1 rdfs:subClassOf ?Class.
	?pet2
		a ?Pet2;
		agent:playsRole ?petRole2;
		foaf:name ?name2.
		?petRole2 a pet:Pet.
		?Pet2 rdfs:subClassOf ?Class.
}
=>
{
	?pet1
		a ?Pet1;
		agent:playsRole ?petRole1;
		foaf:name ?name1;
		pet:keptSeparateFrom ?pet2.
		?petRole1 a pet:Pet.
		?Pet1 rdfs:subClassOf ?Class.
	?pet2
		a ?Pet2;
		agent:playsRole ?petRole2;
		foaf:name ?name2.
		?petRole2 a pet:Pet.
		?Pet2 rdfs:subClassOf ?Class.
}.

# { ?x pet:likesForDinner ?y} => { ?x pet:likesForDinner ?y}.

# { ?x a ?y} => { ?x a ?y}.













#	?SCOPE e:findall ((?pet2 ?name2) {
#		?pet1 pet:keptSeparateFrom ?pet2.
#		?pet2 foaf:name ?name2} ?petsAtDinnerRisk)


#{	:answer digproc:hasSelected (
#	?pet1
#	?Pet
#	?name1
#	"Likes for dinner, so keep seperate from:"
#	?petsAtDinnerRisk
#	)}. 
